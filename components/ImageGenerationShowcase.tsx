"use client";
import React, { useState, useEffect, useCallback } from "react";
import { motion } from "framer-motion";
import Image from "next/image";
import { X } from "lucide-react";

const ImageGenerationShowcase: React.FC = () => {
  const prompt = "A futuristic cityscape at night with neon lights";
  const imageExamples = [
    {
      url: "/images/dall-e-3.jpg",
      alt: "DALL·E's interpretation",
      model: "DALL·E",
    },
    {
      url: "/images/titan-image-generator.jpg",
      alt: "Titan's interpretation",
      model: "Titan",
    },
    {
      url: "/images/stable-diffusion.jpg",
      alt: "Stable Diffusion's interpretation",
      model: "Stable Diffusion",
    },
    {
      url: "/images/midjourney.jpg",
      alt: "MidJourney's interpretation",
      model: "MidJourney",
    },
  ];

  // State to manage modal visibility and selected image index
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedImageIndex, setSelectedImageIndex] = useState<number | null>(
    null
  );

  // Get selected image based on index
  const selectedImage =
    selectedImageIndex !== null ? imageExamples[selectedImageIndex] : null;

  // Function to open modal with selected image
  const openModal = (index: number) => {
    setSelectedImageIndex(index);
    setIsModalOpen(true);
  };

  // Function to close modal
  const closeModal = () => {
    setIsModalOpen(false);
    setSelectedImageIndex(null);
  };

  // Navigate to next/previous image
  const goToNextImage = useCallback(() => {
    if (selectedImageIndex !== null) {
      setSelectedImageIndex((prev) =>
        prev === imageExamples.length - 1 ? 0 : prev! + 1
      );
    }
  }, [selectedImageIndex, imageExamples.length]);

  const goToPreviousImage = useCallback(() => {
    if (selectedImageIndex !== null) {
      setSelectedImageIndex((prev) =>
        prev === 0 ? imageExamples.length - 1 : prev! - 1
      );
    }
  }, [selectedImageIndex, imageExamples.length]);

  // Handle keyboard events
  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (!isModalOpen) return;

      switch (event.key) {
        case "Escape":
          closeModal();
          break;
        case "ArrowRight":
          goToNextImage();
          break;
        case "ArrowLeft":
          goToPreviousImage();
          break;
      }
    };

    window.addEventListener("keydown", handleKeyDown);
    return () => window.removeEventListener("keydown", handleKeyDown);
  }, [isModalOpen, goToNextImage, goToPreviousImage]);

  return (
    <section className="mb-12">
      <div className="container mx-auto px-4">
        {/* Prompt Section */}
        <div className="text-center mb-6">
          <h2 className="text-2xl font-bold mb-2">Prompt:</h2>
          <p className="text-lg text-muted-foreground italic">{`${prompt}`}</p>
        </div>

        {/* Grid of Images */}
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.5 }}
          className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 max-w-6xl mx-auto"
        >
          {imageExamples.map((image, index) => (
            <motion.div
              key={index}
              className="relative aspect-square rounded-lg overflow-hidden shadow-lg hover:shadow-xl transition-shadow duration-200 cursor-pointer"
              whileHover={{ scale: 1.05 }}
              transition={{ duration: 0.2 }}
              onClick={() => openModal(index)}
            >
              <Image
                src={image.url}
                alt={image.alt}
                fill
                className="object-cover"
              />
              <div className="absolute inset-x-0 bottom-4 flex justify-center">
                <p className="bg-black bg-opacity-70 text-white px-4 py-2 rounded-lg text-sm">
                  Generated by <strong>{image.model}</strong>
                </p>
              </div>
            </motion.div>
          ))}
        </motion.div>

        {/* Modal for Enlarged Image */}
        {isModalOpen && selectedImage && selectedImageIndex !== null && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.3 }}
            className="fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm flex items-center justify-center z-50 p-4"
            onClick={closeModal}
          >
            <motion.div
              initial={{ scale: 0.8, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              transition={{ duration: 0.3 }}
              className="relative bg-background rounded-lg shadow-2xl max-w-2xl w-full p-6"
              onClick={(e) => e.stopPropagation()}
            >
              {/* Close Button */}
              <button
                onClick={closeModal}
                className="absolute top-4 right-4 text-gray-600 hover:text-gray-900"
                aria-label="Close modal"
              >
                <X size={24} />
              </button>

              {/* Enlarged Image */}
              <div className="relative w-full h-[400px] mb-4">
                <Image
                  src={selectedImage.url}
                  alt={selectedImage.alt}
                  fill
                  className="object-contain rounded-lg"
                />
              </div>

              {/* Image Info */}
              <div className="text-center mb-4">
                <p className="text-lg font-semibold">{selectedImage.alt}</p>
                <p className="text-sm text-muted-foreground">
                  Generated by <strong>{selectedImage.model}</strong>
                </p>
              </div>

              {/* Carousel Dots */}
              <div className="flex justify-center space-x-2">
                {imageExamples.map((_, index) => (
                  <button
                    key={index}
                    className={`w-3 h-3 rounded-full transition-colors duration-200 ${
                      index === selectedImageIndex
                        ? "bg-blue-600"
                        : "bg-gray-300 hover:bg-gray-400"
                    }`}
                    onClick={() => setSelectedImageIndex(index)}
                    aria-label={`View image ${index + 1}`}
                  />
                ))}
              </div>
            </motion.div>
          </motion.div>
        )}

        {/* Call-to-Action Button */}
        {/* <div className="text-center mt-6">
          <Link
            href={"/image"}
            target="_blank"
            className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors duration-200"
          >
            Try Image Generation
          </Link>
        </div> */}
      </div>
    </section>
  );
};

export default ImageGenerationShowcase;
